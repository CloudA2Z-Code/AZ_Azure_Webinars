# Create a registry
az acr create --name ACRRAG --resource-group girish-rg-01 --sku standard --admin-enabled true

# Use Container Registry to build images. Instead of building an image yourself and pushing it to Container Registry, use the CLI to upload the Docker file and other files that make up your image. Container Registry will then build the image for you. Use the acr build command to run a build:
az acr build --file Dockerfile --registry myregistry --image myimage

### Exercise - Build a Docker image and upload it to Azure Container Registry
git clone https://github.com/MicrosoftDocs/mslearn-deploy-run-container-app-service.git

# 
cd mslearn-deploy-run-container-app-service/dotnet

#
az acr build --registry ACRRAG --image webimage .

## Extend continuous integration to source control by using a Container Registry task
az acr task create --registry <container_registry_name> --name buildwebapp --image webimage --context https://github.com/MicrosoftDocs/mslearn-deploy-run-container-app-service.git --branch master --file Dockerfile --git-access-token <access_token>

## Update the web app and test the webhook
# Go to the dotnet/SampleWeb/Pages folder
cd ~/mslearn-deploy-run-container-app-service/dotnet/SampleWeb/Pages

# Run the following commands to replace the default page in the web app (Index.cshtml) 
mv Index.cshtml Index.cshtml.old
mv Index.cshtml.new Index.cshtml

# Rebuild the image for the web app and push it to Container Registry
cd ~/mslearn-deploy-run-container-app-service/dotnet
az acr build --registry ACRRAG --image webimage .

### Exercise - Scale a web app manually

## Build and deploy the web app

git clone https://github.com/MicrosoftDocs/mslearn-hotel-reservation-system.git

cd mslearn-hotel-reservation-system/src

dotnet build

cd HotelReservationSystem
dotnet publish -o website

# Deploy them to the web app that you created in the previous task
cd website
zip website.zip *
az webapp deployment source config-zip --src website.zip --name hotelsystemTAG --resource-group mslearn-scale

Go to http://hotelsystemTAG.azurewebsites.net/api/reservations/1

## Monitor the performance of the web app before scaling out

cd ~/mslearn-hotel-reservation-system/src/HotelReservationSystemTestClient

code App.config

Replace the below Code:
-----------------------
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <appSettings>
        <add key="NumClients" value="100" />
        <add key="ReservationsServiceURI" value="https://hotelsystemTAG.azurewebsites.net/"/>
        <add key="ReservationsServiceCollection" value="api/reservations"/>
    </appSettings>
</configuration>

dotnet build

# Run the client app.
dotnet run

### Exercise - Run Azure Container Instances
DNS_NAME_LABEL=aci-demo-$RANDOM

# Refers to a Docker image hosted on Docker Hub that runs a basic Node.js web application.
az container create --resource-group girish-rg-01 --name mycontainer --image microsoft/aci-helloworld --ports 80 --dns-name-label $DNS_NAME_LABEL --location westeurope
az container show --resource-group girish-rg-01 --name mycontainer --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}" --out table

### Exercise - Control restart behavior
az container create --resource-group girish-rg-01 --name mycontainer-restart-demo --image microsoft/aci-wordcount:latest --restart-policy OnFailure --location westeurope

# status - Repeat the command until it reaches the Terminated status.
az container show --resource-group girish-rg-01 --name mycontainer-restart-demo --query containers[0].instanceView.currentState.state

# logs
az container logs --resource-group girish-rg-01 --name mycontainer-restart-demo

#### Login to AKS cluster
# AKS Cluster creation command my_sub
az account set -s my_sub

# Get Credentials which will set kubeconfig
az aks get-credentials -g girish-rg-01 -n my-aks-001 --subscription "my_sub" --admin

#### AKS V1 - Cluster Creation Commands
### AKS NON-RBAC Cluster command - Azure CNI
az aks create -g girish-rg-01 -n my-aks-001 -l westeurope --kubernetes-version 1.15.10 --generate-ssh-keys --service-cidr 10.0.0.0/16 --dns-service-ip 10.0.0.10 --docker-bridge-address 172.17.0.1/16 --network-plugin azure --vnet-subnet-id /subscriptions/'my_subscription'/subnets/publc-dev-move-iot-snet-001 --disable-rbac --service-principal 'my_sp' --client-secret 'my_sp_secret' --aad-tenant-id 'my_AAD_TID' --attach-acr /subscriptions/'mysubscription'/providers/Microsoft.ContainerRegistry/registries/myregistry --enable-addons monitoring --max-pods 250 --enable-cluster-autoscaler --min-count 3 --max-count 10 --node-vm-size Standard_DS3_v2 --vm-set-type VirtualMachineScaleSets --load-balancer-sku standard

### AKS NON-RBAC V1 Cluster Creation Command - KubeNet
# Below command creatse cluster with Kubenet + Custom Route Table associated Subnet (i.e. --vnet-subnet-id) + Max Pods to 250 + Max Node Counts




